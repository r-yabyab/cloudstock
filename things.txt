implement button to cycle through symbol, maybe even rand

Names
    stockpop
    equity sky
    stock storm
    StockTangles
    Stock Tangles
    Stock

ChatGPT Names
    stock-flex $10
    stockmorph.net $10 (.com taken by sus chinese site)
    stockshapes.net
    Tradeshape
    stocksquares

Libraries
- 1/31/23 23:43
    npm install react-draggable
- 2/9/23 
    npm install redux react-redux
    - still need to implement
- 2/16/23 22:51
    npm install uuid --save
    - combined REST and SSE, need to get unique keys by applying this to the combined data array
        - not needed, the error was for another map, not the combined


sandbox ////////////////////

useEffect (() => {
    
}, [reducerValue])

const [url, setUrl] = [
    {id:1,
    link: 'fetch ("iex.cloud/AAPL")'},
    {id:2,
    link: 'fetch("iex.cloud/AMZN")'},
]

    const addSymbol = () => {
        let num = Url.length + 1
        let newEntry = {id: num, symbol: symbolName}
        setList([...list, newEntry])
    }


Promise.all([
    (...fetch)
]).then(allResponses => {
    
})


///////////////
///////////////
///////////////
///////////////
///////////////



curl --header 'Accept: text/event-stream' 'https://cloud-sse.iexapis.com/v1/stocksUS5Second?token=YOUR_TOKEN&symbols=spy'
https://ryabyab.iex.cloud/v1/data/core/quote/${symbolName}?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e
https://ryabyab.iex.cloud/v1/data/core/quote/${symbolName}?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e&symbols=spy

'https://cloud-sse.iexapis.com/v1/stocksUS5Second?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e&symbols=spy'

https://cloud-sse.iexapis.com/v1/stocksUS?symbols=spy,msft&token=sk_4b6ebe9d84b44fe48cbf602d2c70884e'


NO UPT (doesn't required paid plan)
https://cloud-sse.iexapis.com/stable/stocksUSNoUTP\?symbols\=spy\&token\=sk_4b6ebe9d84b44fe48cbf602d2c70884e

  Works, but needs paid account
  https://cloud-sse.iexapis.com/stable/stocksUSNoUTP?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e&symbols=spy

Futures
/ref-data/futures/symbols/ng

works
https://ryabyab.iex.cloud/v1/ref-data/futures/symbols/?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e

Works, futures symbol list
https://ryabyab.iex.cloud/v1/ref-data/futures/symbols/ng?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e

    Fetches all symbols from futures
    https://ryabyab.iex.cloud/v1/ref-data/futures/symbols/?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e


==    {
        "underlying": "MNQ",
        "exchange": "CME",
        "exchangeName": "CHICAGO MERCANTILE EXCHANGE"
    },
        {
        "underlying": "NQ",
        "exchange": "CME",
        "exchangeName": "CHICAGO MERCANTILE EXCHANGE"
    },
        {
        "underlying": "MES",
        "exchange": "CME",
        "exchangeName": "CHICAGO MERCANTILE EXCHANGE"
    },



needs paid subscription to work
https://ryabyab.iex.cloud/v1/ref-data/futures/symbols/nq?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e

HTTP REQUEST
GET

/data/CORE/FUTURES_PRICES?last=1

Works, but not updated since 2022
https://ryabyab.iex.cloud/v1//data/CORE/futures_prices/nq/?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e


works, idk what it does
https://ryabyab.iex.cloud/v1/metadata/time-series/*/AAPL?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e

/data-points/


https://iexcloud.io/docs/api/#data-points
    - for making batch requests
    EXAMPLE
    /stock/aapl/batch?types=quote,news,chart&range=1m&last=10
    /stock/market/batch?symbols=aapl,fb,tsla&types=quote,news,chart&range=1m&last=5


ES21U:F/chart?range=1m
Path Parameters



GET

/data/CORE/FUTURE_PRICES?last=1
"cfiCode": "FCECSX",
    "close": 77.04,
    "contractName": "E-mini Crude Oil (QMF4)",
    "contractSize": 500,
    "currency": "USD",
    "exchange": "NYM",
    "exchangeName": "NEW YORK MERCANTILE EXCHANGE",
    "expirationDate": "2023-12-19",
    "figi": "BBG00J6HDFD2",
    "futureId": "QM24F:F",
    "high": 77.1,
    "lastTradeDate": "2023-02-13",
    "lastTradeTime": "14:06:39",
    "lastUpdated": "2023-02-13",
    "low": 76.675,
    "open": 76.675,
    "openInterest": 8,
    "region": "US",
    "settlementPrice": 77.05,
    "symbol": "QM",
    "volume": 3,
    "id": "FUTURE_PRICES",
    "key": "QM",
    "subkey": "QM24F:F",
    "date": 1676246400000,
    "updated": 1676382799000
  },


+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
OUTDATED

DataFetch.js 
   
//
//testing
//testing
//testing
//testing
//
//vvvvvvvvvvvvvvvvvvvvvvv
//
//
// //
//     const [newFetch, setNewFetch] = useState('')
//     const [fetchLink, setFetchLink] = useState (
//         {
//             id:1,
//             symbol:'AAPL',
//             link: 'fetch(`https://ryabyab.iex.cloud/v1/data/core/quote/AAPL?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e`)',
//         },
//         {
//             id:2,
//             symbol:'AMZN',
//             link: 'fetch(`https://ryabyab.iex.cloud/v1/data/core/quote/AMZN?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e`)',
//         }
//     )


    // useEffect (() => {
    //     console.log('todo')
    // }, [])


    // const addLink = () => {
    // if (newFetch) {
    //     let num = fetchLink.length + 1
    //     let newEntry = {id: num, symbol:{symbolName}, link: 'fetch(`https://ryabyab.iex.cloud/v1/data/core/quote/${symbolName}?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e`)'}
    //     setFetchLink(...fetchLink, newEntry)
    //     setNewFetch('')
    // }
    // }

    // const fetchArrList = fetchLink && fetchLink.map((x, index) => {
    //     return (
    //         <div key={x.id}>
    //         {x.open}
    //         </div>
    //     )
    // })

    // // // group method
    // const urls = [
    //     'https://ryabyab.iex.cloud/v1/data/core/quote/AMZN?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e',
    //     'https://ryabyab.iex.cloud/v1/data/core/quote/AAPL?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e',
    //     'https://ryabyab.iex.cloud/v1/data/core/quote/PCG?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e',
    // ]

    // Promise.all(urls.map(x => 
    //     fetch(x)
    //         .then(JSON.parse)
    //         .catch(error => console.log('there was a problem', error))
    //     ))
    //         .then(x => {
    //             console.log(x.open)
    //         })



    // Promise.all([
    //     fetch("https://ryabyab.iex.cloud/v1/data/core/quote/AMZN?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e"),
    //     fetch("https://ryabyab.iex.cloud/v1/data/core/quote/AAPL?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e"),
    //     fetch("https://ryabyab.iex.cloud/v1/data/core/quote/PCG?token=sk_4b6ebe9d84b44fe48cbf602d2c70884e")
    //   ]).then(allResponses => {
    //     console.log(allResponses)  
    //   })






//
//
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//
//
//testing
//testing
//testing
//testing
//testing
//testing
//
//
//
//


+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++

    // const client = new Client({api_token: "TOKEN", version: "VERSION"});
    // client.quote({symbol: "AAPL"}).then((res) => {
    //     console.log(res)
    // })


//     // fetch from db, static numbers
//   useEffect (() => {
//     const fetchStock = async () => {
//         const response = await fetch('https://ryabyab.iex.cloud/v1/data/ryabyab/DATASET_2BRSXSLCA?last=1&token=sk_4b6ebe9d84b44fe48cbf602d2c70884e')
//         const json = await response.json()

//         if (response.ok) {
//             setDbStock(json)
//         }
//     }
//     fetchStock()
//   }, [])

+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++


For /StatsRow.js

    // const styles = {
    //     draggable: {
    //       position: 'absolute',
    //       zIndex: 10,
    //     },
    //     selected: {
    //       position: 'absolute',
    //       zIndex: 20,
    //     },
    //   };

    //   const style = selected ? styles.selected : styles.draggable


+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++

For /StatsRow.js
    - 


import React, { useState, useRef, useEffect} from "react";
// import Draggable from 'react-draggable'

function StatsRow (props) {

    const [pressed, setPressed] = useState(false)
    const [position, setPosition] = useState({x: 0, y: 0})
    const ref = useRef()
    
    useEffect(() => {
    if (ref.current) {
        ref.current.style.transform= `translate(${position.x}px, ${position.y}.px)`
    }
    }, [position])
    
    const onMouseMove = (e) => {
    if (pressed) {
        setPosition({
            x: position.x + e.movementX,
            y: position.y + e.movementY
        })
    }
    }



    const ExitClick = () => {
        console.log('clicked on ExitClick via refExit useRef()')
    }

    return (
        <>
            <div 
                                        onMouseMove={onMouseMove}
                                        onMouseDown={() => setPressed(true)}
                                        onMouseUp={() => setPressed(false)}
                                        ref={ref} 
                                          
            className=" text-white select-none
            [&>div]:shadow-xl [&>div]:m-4 [&>div]:min-w-[300px] [&>div]:min-h-[30px] [&>div]:resize [&>div]:overflow-hidden
            ">
                
                <div
                className={props.change > 0 ? "relative bg-green-400 m-auto flex [&>div]:border-x-[1px] [&>div]:text-center [&>div]:border-slate-300" : "bg-red-400 m-auto flex [&>div]:border-x-[1px] [&>div]:text-center [&>div]:border-slate-300"} draggable="false">
                    <div className="bg-slate-700 text-white p-4 min-w-[120px]">
                        <div className="font-semibold text-2xl tracking-wider">{props.symbol}</div>
                        {/* <div className="max-w-[120px]">{props.companyName}</div> */}
                    </div>
                    <div className="bg-slate-700 w-[100px] p-4">{props.latestPrice}</div>
                    <div>{"change " + props.change}</div>
                    <div>{"open " + props.open}</div>
                    <div onClick={ExitClick} className=" border-none hover:cursor-pointer absolute right-0 top-0 text-2xl"> X </div>
                    {/* <div>{"close " + props.iexClose}</div> */}
                </div>
            </div>

        </>
    )
}

export default StatsRow;



+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++

/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS

for /StatsRow.js

import React, { useState, useRef } from 'react';

const StockApp = () => {
  const [quotes, setQuotes] = useState([
    { name: 'AAPL', top: 0, left: 0, zIndex: 5 },
    { name: 'GOOG', top: 50, left: 50, zIndex: 4 },
    { name: 'TSLA', top: 100, left: 100, zIndex: 3 },
    { name: 'MSFT', top: 150, left: 150, zIndex: 2 },
    { name: 'FB', top: 200, left: 200, zIndex: 1 },
  ]);
  const [isDragging, setDragging] = useState(false);
  const [selectedQuote, setSelectedQuote] = useState(null);

  const handleMouseDown = (index) => {
    setDragging(true);
    setSelectedQuote(index);
    quotes[index].zIndex = 6;
    setQuotes([...quotes]);
  };

  const handleMouseUp = () => {
    setDragging(false);
    quotes[selectedQuote].zIndex = 5;
    setQuotes([...quotes]);
  };

  const handleMouseMove = (event) => {
    if (!isDragging) return;
    quotes[selectedQuote].top = event.clientY;
    quotes[selectedQuote].left = event.clientX;
    setQuotes([...quotes]);
  };

  return (
    <div
      onMouseMove={handleMouseMove}
      onMouseUp={handleMouseUp}
      style={{ height: '100vh', width: '100vw' }}
    >
      {quotes.map((quote, index) => (
        <div
          key={quote.name}
          onMouseDown={() => handleMouseDown(index)}
          style={{
            position: 'absolute',
            top: quote.top,
            left: quote.left,
            zIndex: quote.zIndex,
            backgroundColor: 'white',
            padding: 20,
            border: '1px solid black',
          }}
        >
          {quote.name}
        </div>
      ))}
    </div>
  );
};

export default StockApp;


/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS

+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++

/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS

For return () of Stat.js
                {stockData.map((stock) => (
                    <div key={stock.symbol}>
                        <StatsRow
                        symbol={stock.symbol}
                        open={stock[0].iexOpen}
                        volume={stock[0].volume}
                        price={stock[0].price}
                        change={stock[0].change}
                        iexClose={stock[0].iexClose}
                        latestPrice={stock[0].latestPrice}
                        companyName={stock[0].companyName}
                    />
                    
                    {/* {"close " + stock[0].iexClose} */}
                    </div>
                ))}


/////  WORKS 
/////  WORKS 
/////  WORKS 
/////  WORKS

+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++

//StatsRow.js
//  Works, draggable and u can resize

import React, { useEffect, useState } from "react";
import Draggable from 'react-draggable'

function StatsRow (props, {reducerValue, forceUpdate, yourStocks}) {

    const [position, setPosition] = useState({x:0, y:0})

    const handleStop = () => {
        console.log('handlestop')
    }

    const ExitClick = () => {
        console.log('clicked on ExitClick via refExit useRef()')
    }

    return (
        <>
            <div 
                                        // onMouseMove={onMouseMove}
                                        // onMouseDown={() => setPressed(true)}
                                        // onMouseUp={() => setPressed(false)}
                                        // ref={ref} 
                                        // [&>div]:absolute
                className=" text-white select-none  
            [&>div]:resize [&>div]:overflow-hidden [&>div]:absolute
            [&>div]:shadow-xl [&>div]:m-4 [&>div]:min-w-[180px] [&>div]:min-h-[30px] [&>div]:w-[380px]
            ">
                <Draggable 
                handle=".handle"
                // defaultPosition={
                //     positions ===null ?
                //     {x:0, y:0}
                //     : !positions[props.id] ?
                //     {x:0, y:0} :
                //     {x: positions[props.id].x, y: positions[props.id].y}
                // }
                // onStop={handleStop}
                onStop={handleStop}
                >
                    <div
                        className={props.change > 0 ? "relative bg-green-400 m-auto flex [&>div]:border-x-[1px] [&>div]:text-center [&>div]:border-gray-700" : "bg-red-400 m-auto flex [&>div]:border-x-[1px] [&>div]:text-center [&>div]:border-gray-700"} draggable="false">
                        <div className="bg-zinc-700  text-white p-4 min-w-[120px]">
                            <div className="font-semibold absolute text-2xl tracking-wider top-[50%] -translate-y-1/2 left-[40px]">{props.symbol}</div>
                            {/* <div className="max-w-[120px]">{props.companyName}</div> */}
                        </div>
                        <div className="bg-zinc-700 ratingAnimationYellow w-[100px] p-4">${props.latestPrice}</div>
                        <div>{"O " + props.open}</div>
                        <div>{"C " + props.change}</div>
                        <div onClick={ExitClick} className=" border-none text-slate-500 hover:text-white hover:cursor-pointer absolute right-0 top-0 -mt-3 text-2xl"> x </div>
                        {/* <div className="border-none hover:cursor-pointer absolute right-0 bottom-0 text-2xl bg-green-200">/</div> */}
                        <div className="absolute h-full opacity-0 w-[94%] handle hover:cursor-move bg-black top-0 "> click to drag</div>
                        {/* <div>{"close " + props.iexClose}</div> */}
                    </div>
                </Draggable>
            </div>

        </>
    )
}

export default StatsRow;


+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++


Backup for /StatsRow.js
    A bunch of chatGPT stuff that didn't quite work

import React, { useEffect, useState, useRef } from "react";
import Draggable from 'react-draggable'

function StatsRow (props) {
    const { stock, removeSymbol } = props;
  
    // const [pressed, setPressed] = useState(false)
    // const [position, setPosition] = useState({x: 0, y: 0})
    // const ref = useRef()
    
    // useEffect(() => {
    // if (ref.current) {
    //     ref.current.style.transform= `translate(${position.x}px, ${position.y}.px)`
    //     ref.current.style.zIndex = 100;
    // }
    // }, [position])
    
    // const onMouseMove = (e) => {
    // if (pressed) {
    //     setPosition({
    //         x: position.x + e.movementX,
    //         y: position.y + e.movementY
    //     })
    // }
    // 
    
    
    // // DOESN't WORK WITH ARRAYS WITH MORE THAN 1 OBJECT
    // const [positions, setPositions] = useState({})
    // const [hasLoaded, setHasLoaded] = useState(false)

    // const handleStop = (e, data) => {
    //     console.log('works')
    //     console.log(positions)
    //     const dummyPositions = {...positions}
    //     const propsId=e.target.id
    //     dummyPositions[propsId] = {}
    //     dummyPositions[propsId]["x"] = data.x
    //     dummyPositions[propsId]["y"] = data.y
    //     setPositions(dummyPositions)
    // }

    // useEffect(() => {
    //     const existingDivPositions = JSON.parse(
    //     localStorage.getItem('positions_div')
    //     )
    //     setPositions(existingDivPositions)
    //     setHasLoaded(true)
    // }, [])

    // useEffect(() => {
    //     localStorage.setItem('positions_div', JSON.stringify(positions))
    // }, [positions])
    // // 

    // const [position, setPosition] = useState({x:0, y:0})

    // const handleStop = () => {
    //     console.log('handlestop')
    // }

    // const ExitClick = () => {
    //     console.log('clicked on ExitClick via refExit useRef()')
    // }

    

    //test vvvvvv
    // const [sizes, setSizes] = useState(() => {
    //     const savedSizes = localStorage.getItem('quote-sizes');
    //     if (savedSizes) {
    //       return JSON.parse(savedSizes);
    //     }
    
    //     return yourStocks.reduce((acc, { props }) => ({ ...acc, [stock]: { width: 0, height: 0 } }), {});
    //   });


    //   useEffect(() => {
    //     localStorage.setItem('quote-sizes', JSON.stringify(sizes));
    //   }, [sizes]);


    //   const handleResize = (stock, { width, height }) => {
    //     setSizes({ ...sizes, [stock]: { width, height } });
    //   };

    // const ref = useRef(null);
    // useEffect(() => {
    //   onResize(ref.current);
    // }, []);


        //   React.useEffect(() => {
    //     localStorage.setItem(`${stock}_size`, JSON.stringify(size));
    //   }, [size]);

      //test ^^^^^




    return (
        <>
            <div 
                                        // onMouseMove={onMouseMove}
                                        // onMouseDown={() => setPressed(true)}
                                        // onMouseUp={() => setPressed(false)}
                                        // ref={ref} 
                                        // [&>div]:absolute
                className=" text-white select-none  
            [&>div]:resize [&>div]:overflow-hidden [&>div]:absolute
            [&>div]:shadow-xl [&>div]:m-4 [&>div]:min-w-[180px] [&>div]:min-h-[30px] [&>div]:w-[380px]
            "
            // size={sizes[stock]}
            // onResize={(e, direction, ref, delta) => handleResize(stock, ref.style)}
            >
                {/* <Draggable 
                handle=".handle"
                // defaultPosition={
                //     positions ===null ?
                //     {x:0, y:0}
                //     : !positions[props.id] ?
                //     {x:0, y:0} :
                //     {x: positions[props.id].x, y: positions[props.id].y}
                // }
                // onStop={handleStop}
                onStop={handleStop}
                > */}
                    <div 
            // ref={ref} 
            // style={{ width: size.width, height: size.height }}

                    // style={{ width: sizes[stock].width, height: sizes[stock].height }}
                        className={props.change > 0 ? "relative bg-green-400 m-auto flex [&>div]:border-x-[1px] [&>div]:text-center [&>div]:border-gray-700" : "bg-red-400 m-auto flex [&>div]:border-x-[1px] [&>div]:text-center [&>div]:border-gray-700"} draggable="false">
                        <div className="bg-zinc-700  text-white p-4 min-w-[120px]">
                            <div className="font-semibold absolute text-2xl tracking-wider top-[50%] -translate-y-1/2 left-[40px]">{props.symbol}</div>
                            {/* <div className="max-w-[120px]">{props.companyName}</div> */}
                        </div>
                        <div className="bg-zinc-700 ratingAnimationYellow w-[100px] p-4">${parseFloat(props.latestPrice).toFixed(2)}</div>
                        <div>{"O " + props.open}</div>
                        <div>{"C %" + 
                        parseFloat(props.changePercent * 100).toFixed(2)
                        // props.changePercent
                        }</div>
                        <div selectnums={stock} onClick={removeSymbol} className=" border-none text-slate-500 hover:text-white hover:cursor-pointer absolute right-0 top-0 -mt-3 text-2xl"> x </div>
                        {/* <div className="border-none hover:cursor-pointer absolute right-0 bottom-0 text-2xl bg-green-200">/</div> */}
                        <div className="absolute h-full opacity-0 w-[94%] handle hover:cursor-move bg-black top-0 "> click to drag</div>
                        {/* <div>{"close " + props.iexClose}</div> */}
                    </div>
                {/* </Draggable> */}
            </div>

        </>
    )
}

export default StatsRow;


+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++



/Stats.js
    old comments near the top

    
        // {id: 0,  symbol: 'AAPL'},
        // {id: 1,  symbol: 'AMZN'},
        // {id: 2,  symbol: 'PCG'}

        // "AAPL", 
        // "MSFT", 
        // "TSLA", 
        // "PCG", 
        // "AMZN"

        // const addSymbol = () => {
        //     // if (symbolName = String) {
        //         if (symbolName !== '') {
        //         let maxId = yourStocks.length > 0 ? Math.max(...yourStocks.map(item => item.id)) : -1;
 

        // // Made by me, not chatGPT
        //     let newEntry = {id: maxId + 1, stock: symbolName}
        //     setYourStocks([...yourStocks, newEntry])
        //     // setYourStocks([...yourStocks, symbolName])
        //     setSymbolName('')
        // // } else {
        // //     console.log('please input symbol')
        // // }
        //     }
        // }



+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++


    /Stat.js NOT WORKING AT ALL, but keep in here
    - from some youtube tutorial, doesn't work at all



// // // // // // // // // // // TEST
// // // // // // // // // // // TEST
// // // // // // // // // // // TEST    vvvvvvvvvv

    // const [positions, setPositions] = useState({})
    // const [hasLoaded, setHasLoaded] = useState(false)

    // const handleStop = (e, data) => {
    //     console.log('works')
    //     console.log(positions)
    //     const dummyPositions = {...positions}
    //     const stockId=e.target.id
    //     dummyPositions[stockId] = {}
    //     dummyPositions[stockId]["x"] = data.x
    //     dummyPositions[stockId]["y"] = data.y
    //     setPositions(dummyPositions)
    // }

    // useEffect(() => {
    //     const existingDivPositions = window.localStorage.getItem('positions_div')
    //     setPositions(JSON.parse(existingDivPositions))
    //     setHasLoaded(true)
    // }, [])

    // useEffect(() => {
    //     window.localStorage.setItem('positions_div', JSON.stringify(positions))
    // }, [positions])




// // // // // // // // // // // TEST  ^^^^^
// // // // // // // // // // // TEST
// // // // // // // // // // // TEST
// // // // // // // // // // // TEST

 
    // const [selectedQuote, setSelectedQuote] = useState(null)

    // const handleSelect = (stock) => {
    //     selectedQuote(stock)
    // }

    // const [defaultPosition, setDefaultPosition] = useState ({x:0, y:0})

    // const onStopHandler = (e, data) => {
    //     setDefaultPosition({defaultPosition: {x:data.x, y:data.y}})
    //     console.log(defaultPosition)
    // }

    //test vvvvv

    // const [sizes, setSizes] = useState(() => {
    //     const savedSizes = localStorage.getItem('quote-sizes');
    //     if (savedSizes) {
    //       return JSON.parse(savedSizes);
    //     }
    
    //     return yourStocks.reduce((acc, { id }) => ({ ...acc, [id]: { width: 0, height: 0 } }), {});
    //   });

    //   useEffect(() => {
    //     localStorage.setItem('quote-sizes', JSON.stringify(sizes));
    //   }, [sizes]);


    //   const handleResize = (id, ref) => {
    //     setSizes({ ...sizes, [id]: { width: ref.offsetWidth, height: ref.offsetHeight } });
    //   };

    //       const ref = useRef(null);
    // useEffect(() => {
    //   onResize(ref.current);
    // }, []);

    

      //test ^^^^^
      

+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   

    /Stat.js
    - WORKS for just returning the REST endpoint data, changed before attempting to add SSE

<div className=''>
                {stockData.map((stock) => (
                 <Draggable 
                 handle=".handle"
                 key={stock.id}
                 position={positions[stock.id]}
                 onDrag={(e, {x,y}) => handleDrag(stock.id, {x,y})}
                
            > 
                    <div 

                    >
                        <StatsRow
                        symbol={stock.symbol}
                        latestPrice={stock[0].latestPrice}
                        change={stock[0].change}
                        changePercent={stock[0].changePercent}
                        // open={stock[0].iexOpen}
                        // volume={stock[0].volume}
                        // price={stock[0].price}
                        // iexClose={stock[0].iexClose}
                        // companyName={stock[0].companyName}
                            // reducerValue={reducerValue} 
                            // forceUpdate={forceUpdate}
                            yourStocks={yourStocks}
                            removeSymbol={removeSymbol}
                            stock={stock.id}
                        
                    />
                    {/* <div className='' selectnums={stock.id} onClick={removeSymbol}>x</div> */}
                    
                    {/* {"close " + stock[0].iexClose} */}
                    </div>
</Draggable>

                ))}
</div>

+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++  


    /StatsRow.js BACKUP (works since refactoring a bit in 02/18/23 19:31)

    import React, { useState, useEffect } from "react";
// import { format } from "date-fns"
// import Draggable from 'react-draggable'

function StatsRow (props) {
    const { stock, removeSymbol, openMarket } = props;
    const [previousPrice, setPreviousPrice] = useState(props.price)
    const [counter, setCounter] = useState(0)
    
    useEffect(() => {
        if (props.price !== previousPrice) {
            setPreviousPrice(props.price);
            const element = document.getElementById(`price-${props.symbol}`);
            element.classList.add(props.price > previousPrice ? 'price-up' : 'price-down');
            setTimeout(() => element.classList.remove('price-up', 'price-down'),200);
        }
    }, [props.price, previousPrice, props.symbol]);
    
    useEffect(() => {
        if (openMarket) {
        let interval = setInterval(() => {
            setCounter(x => x + 10)
        },100)
        if (props.price !== previousPrice) {
            setCounter(0)
            clearInterval(interval)
        }
    }
    },[props.price])
    
    const [sizeCount, setSizeCount] = useState(1);
    const [previousSize, setPreviousSize] = useState(props.size);
    const [displaySize, setDisplaySize] = useState(props.size);
    
    useEffect(() => {
        if (props.size === previousSize) {
            setSizeCount(count => count + 1);
            if (props.size === previousSize) {
                setDisplaySize(`${props.size}(${sizeCount +1})`);
            }
        } else {
            setSizeCount(0);
            setDisplaySize(props.size);
        }
        setPreviousSize(props.size);
    }, [props.size]);
    
    // const [percentage, setPercentage] = useState(0)
    // useEffect(() => {
    //     const remainder = props.price - props.open
    //     const percent = remainder/props.price
    //     setPercentage(percent * 100)
        
    // }, [props.price])

    
    
    return (
        <>
            <div
                className=" text-white select-none  
                [&>div]:resize [&>div]:overflow-hidden [&>div]:absolute
            [&>div]:shadow-xl [&>div]:m-4 [&>div]:min-w-[180px] [&>div]:min-h-[30px] [&>div]:w-[300px]
            "
            >
                <div
                    // style={{ width: sizes[stock].width, height: sizes[stock].height }}
                    className={props.change > 0 ? "relative bg-green-400 m-auto flex [&>div]:text-center [&>div]:border-x-[1px] [&>div]:border-gray-700"
                     : 
                     "bg-red-400 m-auto flex [&>div]:border-x-[1px] [&>div]:border-r-0 [&>div]:text-center [&>div]:border-gray-700"} draggable="false">
                    <div className="bg-zinc-700  text-white p-4 min-w-[120px]">
                    <div className="absolute left-1 top-0">
                        {openMarket ? Math.floor(counter/100) : null}
                            </div>
                        <div className="font-semibold absolute text-2xl tracking-wider top-[50%] -translate-y-1/2 left-[40px]">
                            {props.symbol}
                            </div>
                        {/* <div className="max-w-[120px]">{props.companyName}</div> */}
                    </div>
                    <div  id={`price-${props.symbol}`} className="bg-zinc-700 price  w-[100px] p-4">
                        {/* ${parseFloat(props.latestPrice).toFixed(2)}
                    <br></br> */}
                        ${openMarket ? props.price.toFixed(2) : props.latestPrice}
                        <br></br>
                        {openMarket ? props.size : null}
                        {/* {`${displaySize}`}
                        <br></br> */}
                        {/* {format((props.time),'k:mm:ss')}
                        <br></br> */}
                        {/* {Math.floor(counter % 1000 / 100)} */}
                        {/* {Math.floor(counter/100)} */}
                    </div>
                    <div className="flex-col pt-1 w-[60px] divide-solid divide-y-[1px] divide-black">
                        {/* <div>{parseFloat(props.change).toFixed(2)}</div> */}
                        <div>{openMarket ? parseFloat(props.price - props.previousClose).toFixed(2) : props.change}</div>
                        {/* <div>{parseFloat(props.price - props.open).toFixed(2)}</div> */}
                        {/* <div>open{props.open} + price{props.price}</div> */}
                        <div>%{openMarket ? parseFloat(((props.price - props.previousClose)/props.previousClose)*100).toFixed(2) : parseFloat(props.changePercent*100).toFixed(2)}</div>
                        {/* <div>%premarket sesh{parseFloat(((props.price - props.open)/props.open)*100).toFixed(2)}</div> */}
                      
                        {/* <div> */}
                            {
                            // "%" +
                            // parseFloat(props.changePercent * 100).toFixed(2)
                            // props.changePercent
                        }
                        {/* <br></br>
                        {props.change}
                        <br></br>
                        open{props.open} iexOpen{props.iexOpen} change{props.change}
                        <br></br>
                        prevClose{props.previousClose}
                        <br></br> */}
                        {/* </div> */}

                    </div>
                    <div selectnums={stock} onClick={removeSymbol} className=" border-none text-slate-500 hover:text-white hover:cursor-pointer absolute right-0 top-0 -mt-3 text-2xl"> x </div>
                    {/* <div className="border-none hover:cursor-pointer absolute right-0 bottom-0 text-2xl bg-green-200">/</div> */}
                    <div className="absolute h-full opacity-0 w-[94%] handle hover:cursor-move bg-black top-0 "> click to drag</div>
                    {/* <div>{"close " + props.iexClose}</div> */}
                </div>
                {/* </Draggable> */}
            </div>

        </>
    )
}

export default StatsRow;



+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++  



    /StatsRow.js

                            {/* <div>%premarket sesh{parseFloat(((props.price - props.open)/props.open)*100).toFixed(2)}</div> */}
                      
                        {/* <div> */}
                            {
                            // "%" +
                            // parseFloat(props.changePercent * 100).toFixed(2)
                            // props.changePercent
                        }
                        {/* <br></br>
                        {props.change}
                        <br></br>
                        open{props.open} iexOpen{props.iexOpen} change{props.change}
                        <br></br>
                        prevClose{props.previousClose}
                        <br></br> */}
                        {/* </div> */}



+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++ 

    /About.js works, but with width and height logging testing

    
    import React, { useState, useEffect, useRef} from "react";
import demogif from '../photos/demogif.gif'

function About () {

    const [height, setHeight] = useState(0);
    const [width, setWidth] = useState(0)
    const elementRef = useRef(0);
    const [mouse, setMouse] = useState(false)
  
    useEffect(() => {

        setWidth(elementRef.current.clientWidth)
        setHeight(elementRef.current.clientHeight)
        console.log(height)
        
       },[mouse])
  

    return (
        <>
            <div className="text-center pt-10 max-w-[600px] m-auto">
                <div className="italic text-xl font-bold">
                    {/* About Stock Shapes  */}
                    About Stock Shapes
                </div>

                {/* <div>Looking for a hassle-free way to view real-time stock quotes? Our website offers a clean and easy-to-use interface where you can access quotes without signing up. With the ability to resize and reposition quotes on the page, you'll have a personalized experience. And if you need more frequent updates, simply sign up for a free account. Get straight to the information you need, no fuss, no distraction. Try it now.</div> */}
                <div>Track your stocks with minimal overhead...</div>
                <div>No login or download needed!</div>
                <br></br>

                <div className="hidden">
                    {/* <div>Use it to aid your trading sessions or use as a widget by resizing the page.</div> */}
                    <div>This website was made as a way to track real time futures updates. Free stock apps tend to use delayed data and overlook details such as having a timer with milliseconds.</div>
                    <div>Due to IEX cloud API costing money, free users have been limited to 5 stocks with a timeout after 30 minutes. Paid users <span className="text-green-400">$4.99 a month</span> have access to 20 symbols, no timeouts, and more frequent stock updates.</div>
                    {/* <div>Inspired by the live DOM from tradovate. I loved seeing the numbers go bananas during open session</div> */}
                </div>
                <div className="italic text-xl pt-10 font-bold"> Features </div>
                <div>Free-tier: Real time quotes, you get the latest updates. Max 5 quotes on screen.</div>
                <div>Globex hours: 1 update every 5 seconds.</div>
                <div>Due to API costs, SSE streams time out after 10 minutes of inactivity on market open</div>
                {/* <div>Access to: Stocks, futures, cryptocurrencies</div> */}

                <div className="italic text-xl pt-10 font-bold"> Frequently Asked Questions: </div>
                <div>Q: Why are latest prices different from other platforms?</div>
                <div>A: Prices are based on the latest sale price of the day including after-market, not before market close.</div>
                <br></br>
                <div>Q: Why are the price changes/open different than in x platforms?</div>
                <div>A: Price open is based on premarket price, not market open.</div>
                <img src={demogif} alt="gif" />
                
                {/* <div>Signup: 2 updates per second. Max 10 quotes on screen. </div>
                <div>Rollovers are taken care of.</div> */}


                <div className="italic text-xl pt-10 font-bold"> Changelog: </div>
                <div>Launch day _______</div>
{/* 
<div className="absolute top-20 bg-blue-400 w-10 h-10 overflow-hidden resize">
    penis
    </div> */}

    <div
    className={`absolute top-20 bg-blue-400 w-10 h-10 resize overflow-hidden ${height > 100 ? "text-black" : "text-red-400"}`}
    ref={elementRef}
    onMouseUp={(e) => setMouse(!mouse)}
    >
      Width: {width} Height: {height}
    </div>

            </div>
        </>
    )
}

export default About;







+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++   
+++++++++++++++++++++++++++               +++++++++++++++++++++++++++ 